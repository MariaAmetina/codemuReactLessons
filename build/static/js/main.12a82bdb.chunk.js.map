{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4JA63CeA,MADf,aCh3CeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.12a82bdb.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\n// function App() {\n//   const [name, setName] = useState(\"maria\");\n//   const [surname, setSurname] = useState(\"ametina\");\n//   let [age, setAge] = useState(24);\n//   const [banned, setBanned] = useState(false);\n\n//   return (\n//     <div className=\"App\">\n//       <p>{name}</p>\n//       <p>{surname}</p>\n//       <p>{age}</p>\n//       <p>{banned ? \"забанен\" : \"не забанен\"}</p>\n\n//       <button onClick={() => setName(\"pasha\")}>change name</button>\n//       <button onClick={() => setSurname(\"smirnov\")}>change surname</button>\n//       <button onClick={() => setAge(27)}>change age</button>\n//       <br />\n//       {/* {banned ? (\n//         <button onClick={() => setBanned(false)}>разбанить</button>\n//       ) : (\n//         <button onClick={() => setBanned(true)}>забанить</button>\n//       )} */}\n//       <button onClick={() => setBanned(!banned)}>\n//         {!banned ? \"забанить\" : \"разбанить\"}\n//       </button>\n//       <br />\n//       <button onClick={() => setAge(--age)}>- age</button>\n//       <button onClick={() => setAge(++age)}>+ age</button>\n//     </div>\n//   );\n// }\n\n// function countYearOfBirth(num) {\n//   const date = new Date();\n//   const year = date.getFullYear();\n\n//   return year - num;\n// }\n\n// function App() {\n//   const [value, setValue] = useState(0);\n//   const [otherVal, setOtherVal] = useState(\"other\");\n//   const [age, setAge] = useState(0);\n\n//   function handleChange(event) {\n//     return setOtherVal(event.target.value);\n//   }\n\n//   return (\n//     <div>\n//       <input value={value} onChange={(event) => setValue(event.target.value)} />\n//       <p>\n//         {value} ** 2 = {value ** 2}\n//       </p>\n//       <p>в введенном тексте {value.length} символов</p>\n\n//       <input value={otherVal} onChange={handleChange} />\n//       <p>text: {otherVal}</p>\n\n//       <input value={age} onChange={(event) => setAge(event.target.value)} />\n//       <p>You were born in {countYearOfBirth(age)}</p>\n//     </div>\n//   );\n// }\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n// function App() {\n//   const [first, setFirst] = useState(0);\n//   const [second, setSecond] = useState(0);\n//   const [resultFirst, setResultFirst] = useState(0);\n//   const [resultSecond, setResultSecond] = useState(0);\n\n//   return (\n//     <div>\n//       <input value={first} onChange={(event) => setFirst(event.target.value)} />\n//       <input\n//         value={second}\n//         onChange={(event) => setSecond(event.target.value)}\n//       />\n\n//       <button onClick={() => setResultFirst(+first + +second)}>Сложить</button>\n//       <button onClick={() => setResultSecond(first * second)}>Умножить</button>\n\n//       <p>\n//         Сумма: {resultFirst} <br />\n//         Произведение:{resultSecond}\n//       </p>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n// function App() {\n//   const [value, setValue] = useState(\"привет\");\n\n//   const converter = {\n//     а: \"a\",\n//     б: \"b\",\n//     в: \"v\",\n//     г: \"g\",\n//     д: \"d\",\n//     е: \"e\",\n//     ё: \"e\",\n//     ж: \"zh\",\n//     з: \"z\",\n//     и: \"i\",\n//     й: \"y\",\n//     к: \"k\",\n//     л: \"l\",\n//     м: \"m\",\n//     н: \"n\",\n//     о: \"o\",\n//     п: \"p\",\n//     р: \"r\",\n//     с: \"s\",\n//     т: \"t\",\n//     у: \"u\",\n//     ф: \"f\",\n//     х: \"h\",\n//     ц: \"c\",\n//     ч: \"ch\",\n//     ш: \"sh\",\n//     щ: \"sch\",\n//     ь: \"`\",\n//     ы: \"y\",\n//     ъ: \"\",\n//     э: \"e\",\n//     ю: \"yu\",\n//     я: \"ya\",\n//   };\n\n//   function translit(text) {\n//     return text\n//       .split(\"\")\n//       .map((el) => {\n//         for (let [key, value] of Object.entries(converter)) {\n//           if (el === key) {\n//             el = value;\n//           }\n//         }\n//         return el;\n//       })\n//       .join(\"\");\n//   }\n\n//   return (\n//     <div>\n//       <textarea\n//         value={value}\n//         onChange={(event) => setValue(event.target.value)}\n//       />\n//       <p>{translit(value)}</p>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//21//////////////////////////////////////////////////////////////////////////////////////\n//function App() {\n// const [checked, setChecked] = useState(false);\n// const [greeting, setGreeting] = useState(\"\");\n\n// function changeGreeting() {\n//   checked ? setGreeting(\"hey\") : setGreeting(\"bye\");\n// }\n\n// return (\n//   <div>\n//     <input\n//       type=\"checkbox\"\n//       checked={checked}\n//       onChange={() => setChecked(!checked)}\n//     />\n//     <button onClick={changeGreeting}>do it</button>\n//     <p>{greeting}</p>\n//   </div>\n// );\n\n// const [html, setHtml] = useState(false);\n// const [css, setCss] = useState(false);\n// const [js, setJs] = useState(false);\n\n// function checkIfTrue(booleanVal, textToPrint) {\n//   return booleanVal ? textToPrint : null;\n// }\n\n// return (\n//   <div>\n//     <h2>Choose tecnology you know</h2>\n//     <input\n//       type=\"checkbox\"\n//       checked={html}\n//       onChange={() => setHtml(!html)}\n//     />{\" \"}\n//     <p>HTML</p>\n//     <input type=\"checkbox\" checked={css} onChange={() => setCss(!css)} />{\" \"}\n//     <p>CSS</p>\n//     <input type=\"checkbox\" checked={js} onChange={() => setJs(!js)} />{\" \"}\n//     <p>JS</p>\n//     <p>\n//       So, you know: {checkIfTrue(html, \"html\")} {checkIfTrue(css, \"css\")}\n//       {checkIfTrue(js, \"js\")}\n//     </p>\n//   </div>\n// );\n\n// const [checked, setChecked] = useState(false);\n// let validator;\n\n// if (checked) {\n//   validator = (\n//     <div>\n//       <h2>Ура, вам уже есть 18 лет</h2>\n//       <p>здесь расположен контент для взрослых</p>\n//     </div>\n//   );\n// } else {\n//   validator = (\n//     <div>\n//       <p>увы, вам еще нет 18 лет</p>\n//     </div>\n//   );\n// }\n\n// return (\n//   <div>\n//     <p>Вам есть 18 лет?</p>{\" \"}\n//     <input\n//       type=\"checkbox\"\n//       checked={checked}\n//       onChange={() => setChecked(!checked)}\n//     />\n//     <div>{validator}</div>\n//   </div>\n// );\n\n//   const [checked, setChecked] = useState(false);\n\n//   return (\n//     <div>\n//       <input\n//         type=\"checkbox\"\n//         checked={checked}\n//         onChange={() => setChecked(!checked)}\n//       />\n//       <p style={{ visibility: checked ? \"hidden\" : \"visible\" }}>hide me</p>\n//     </div>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//22//////////////////////////////////////////////////////////////////////////////////////\n\n//function App() {\n// const [value, setValue] = useState(\"\");\n\n// return (\n//   <div>\n//     <select value={value} onChange={(event) => setValue(event.target.value)}>\n//       <option>Moscow</option>\n//       <option>Los Angeles</option>\n//       <option>New York</option>\n//     </select>\n//     <p>Your choice: {value}</p>\n//   </div>\n// );\n\n// const [value, setValue] = useState(\"\");\n// const citiesArr = [\"Moscow\", \"Cheb\", \"Paris\", \"Oslo\", \"Tokyo\"];\n\n// const options = citiesArr.map((el, i) => {\n//   return <option key={i}>{el}</option>;\n// });\n\n// return (\n//   <>\n//     <select value={value} onChange={(e) => setValue(e.target.value)}>\n//       {options}\n//     </select>\n//     <p>{value}</p>\n//   </>\n// );\n\n// const [value, setValue] = useState(\"\");\n\n// return (\n//   <>\n//     <select value={value} onChange={(e) => setValue(e.target.value)}>\n//       <option value=\"1\">0-12</option>\n//       <option value=\"2\">13-17</option>\n//       <option value=\"3\">18-25</option>\n//       <option value=\"4\">25 and more</option>\n//     </select>\n\n//     <p>\n//       {value === \"1\" && \"you are 0-12 y.o.\"}\n//       {value === \"2\" && \"you are 13-17 y.o.\"}\n//       {value === \"3\" && \"you are 18-25 y.o.\"}\n//       {value === \"4\" && \"you are 25 and more y.o.\"}\n//     </p>\n//   </>\n// );\n//}\n//export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//23//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [value, setValue] = useState(0);\n\n//   function changeHandler(e) {\n//     return setValue(e.target.value);\n//   }\n\n//   return (\n//     <>\n//       <input\n//         type=\"radio\"\n//         name=\"radio\"\n//         value=\"1\"\n//         onChange={changeHandler}\n//         checked={value === \"1\" ? true : false}\n//       />\n//       <input\n//         type=\"radio\"\n//         name=\"radio\"\n//         value=\"2\"\n//         onChange={changeHandler}\n//         checked={value === \"2\" ? true : false}\n//       />\n//       <input\n//         type=\"radio\"\n//         name=\"radio\"\n//         value=\"3\"\n//         onChange={changeHandler}\n//         checked={value === \"3\" ? true : false}\n//       />\n//       <p>{value === \"3\" && \"good girl\"}</p>\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//24//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [value, setValue] = useState(\"default\");\n\n//   return (\n//     <>\n//       <input defaultValue={value} onChange={(e) => setValue(e.target.value)} />\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//25//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   // const [value, setValue] = useState([1, 2, 3, 4, 5]);\n\n//   // const newArr = [...value];\n\n//   // function addEl(arr) {\n//   //   arr.push(arr[arr.length - 1] + 1);\n//   //   return setValue(arr);\n//   // }\n\n//   // return (\n//   //   <div>\n//   //     <button onClick={() => addEl(newArr)}>add num</button>\n//   //     <p>{newArr}</p>\n//   //   </div>\n//   // );\n\n//   const [notes, setNotes] = useState([12, 789, 112, 34, 56, 78, 89]);\n//   const copy = Object.assign([], notes);\n//   //const copy = [...notes];\n//   const indexForDel = 2;\n\n//   function deleteElement(arr, i) {\n//     arr.splice(indexForDel, 1);\n//     return setNotes(arr);\n//   }\n\n//   function changeElement(arr, index, elem) {\n//     arr[index] = elem;\n//     return setNotes(arr);\n//   }\n\n//   function reverseArr(arr) {\n//     //arr.sort((a, b) => a - b); //по возрастанию\n//     arr.reverse();\n//     return setNotes(arr);\n//   }\n\n//   return (\n//     <div>\n//       <p>{copy}</p>\n//       <button onClick={() => deleteElement(copy, indexForDel)}>\n//         delete element from array\n//       </button>\n//       <button onClick={() => changeElement(copy, indexForDel, \"!\")}>\n//         chenge array's element\n//       </button>\n//       <button onClick={() => reverseArr(copy)}>reverse elements</button>\n//     </div>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//26//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [notes, setNotes] = useState([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n//   const [value, setValue] = useState(\"\");\n\n//   const result = notes.map((el, i) => {\n//     return <li key={i}>{el}</li>;\n//   });\n\n//   function onBlurInput() {\n//     return setNotes([...notes, value]);\n//   }\n\n//   return (\n//     <>\n//       <input\n//         value={value}\n//         onChange={(e) => setValue(e.target.value)}\n//         onBlur={() => onBlurInput()}\n//       />\n//       <ul>{result}</ul>\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//27//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [notes, setNotes] = useState([\"a\", \"b\", \"c\", \"d\"]);\n\n//   const result = notes.map((el, i) => {\n//     return (\n//       <li key={i}>\n//         {el}\n//         <button onClick={() => deleteEl(i)}>delete element</button>\n//       </li>\n//     );\n//   });\n\n//   function deleteEl(i) {\n//     setNotes([...notes.slice(0, i), ...notes.slice(i + 1)]);\n//   }\n\n//   return (\n//     <>\n//       <ul>{result}</ul>\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//28//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [notes, setNotes] = useState([1, 2, 3]);\n\n//   function changeHandler(event, index) {\n//     return setNotes([\n//       ...notes.slice(0, index),\n//       event.target.value,\n//       ...notes.slice(index + 1),\n//     ]);\n//   }\n\n//   function getSum(arr) {\n//     return arr.reduce((prev, cur) => +prev + +cur);\n//   }\n\n//   const result = notes.map((note, index) => {\n//     return (\n//       <input\n//         value={note}\n//         key={index}\n//         onChange={(e) => changeHandler(e, index)}\n//       />\n//     );\n//   });\n\n//   return (\n//     <>\n//       {result}\n//       {getSum(notes)}\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//29//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [notes, setNotes] = useState([\"a\", \"b\", \"c\", \"d\"]);\n//   const [editEL, setEditEl] = useState(null);\n\n//   const result = notes.map((el, i) => {\n//     return (\n//       <li key={i}>\n//         {el} <button onClick={() => setEditEl(i)}>edit</button>\n//       </li>\n//     );\n//   });\n\n//   function changeElement(e) {\n//     setNotes([\n//       ...notes.slice(0, editEL),\n//       e.target.value,\n//       ...notes.slice(editEL + 1),\n//     ]);\n//   }\n\n//   return (\n//     <>\n//       <ul>{result}</ul>\n//       <input\n//         value={editEL >= 0 ? notes[editEL] : \"\"}\n//         onChange={changeElement}\n//         onBlur={(e) => (e.target.value = \"\")}\n//       />\n//     </>\n//   );\n// }\n// export default App;\n\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////\n//30//////////////////////////////////////////////////////////////////////////////////////\n//Первый подход\n// function App() {\n//   const [notes, setNotes] = useState([12222, 23333, 3444, 455, 566, 677, 7888]);\n//   const [editNum, setEditNum] = useState(null);\n//   const [value, setValue] = useState(\"\");\n\n//   const result = notes.map((el, i) => {\n//     return (\n//       <p key={i} onClick={() => setEditNum(i)}>\n//         {el}\n//       </p>\n//     );\n//   });\n\n//   let input;\n\n//   if (editNum === null) {\n//     input = (\n//       <input\n//         value={value}\n//         onChange={(e) => setValue(e.target.value)}\n//         onBlur={(e) => setNotes([...notes, value])}\n//       />\n//     );\n//   } else {\n//     input = (\n//       <input\n//         value={notes[editNum]}\n//         onChange={(e) =>\n//           setNotes([\n//             ...notes.slice(0, editNum),\n//             e.target.value,\n//             ...notes.slice(editNum + 1),\n//           ])\n//         }\n//         onBlur={() => setEditNum(null)}\n//       />\n//     );\n//   }\n\n//   return (\n//     <div>\n//       {result} {input}\n//     </div>\n//   );\n// }\n// export default App;\n\n// Второй подход\n\n// function App() {\n//   const [notes, setNotes] = useState([12222, 23333, 3444, 455, 566, 677, 7888]);\n//   const [editNum, setEditNum] = useState(null);\n//   const [value, setValue] = useState(\"\");\n\n//   const result = notes.map((el, i) => {\n//     return (\n//       <p\n//         key={i}\n//         onClick={(e) => {\n//           setEditNum(i);\n//           setValue(notes[i]);\n//         }}\n//       >\n//         {el}\n//       </p>\n//     );\n//   });\n\n//   function editInput(e) {\n//     setValue(e.target.value);\n//     if (editNum !== null) {\n//       setNotes([\n//         ...notes.slice(0, editNum),\n//         e.target.value,\n//         ...notes.slice(editNum + 1),\n//       ]);\n//     }\n//   }\n\n//   function quitEditing(e) {\n//     if (editNum === null) {\n//       setNotes([...notes, value]);\n//     } else {\n//       setEditNum(null);\n//     }\n//     setValue(\"\");\n//   }\n\n//   return (\n//     <div>\n//       {result}\n//       <input value={value} onChange={editInput} onBlur={quitEditing} />\n//     </div>\n//   );\n// }\n// export default App;\n\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 31//////////////////////////////////////////////////////////////////////////////////////\n\n// function App() {\n//   const [obj, setObj] = useState({\n//     prop1: \"value1\",\n//     prop2: \"value2\",\n//     prop3: \"value3\",\n//   });\n\n//   let res = [];\n//   for (let key in obj) {\n//     res.push(\n//       <li id={key}>\n//         {obj[key]}\n//         <input onChange={change} />\n//       </li>\n//     );\n//   }\n\n//   function change(e) {\n//     let el = e.target.closest(\"li\").id;\n//     let value = e.target.value;\n\n//     let copy = Object.assign({}, obj);\n\n//     copy[el] = value;\n//     setObj(copy);\n//   }\n\n//   return <ul>{res}</ul>;\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 32//////////////////////////////////////////////////////////////////////////////////////\n\n// const initObj = {\n//   prop1: \"value1\",\n//   prop2: \"value2\",\n//   prop3: \"value3\",\n// };\n\n// function App() {\n//   const [obj, setObj] = useState(initObj);\n\n//   function handleChange(prop, event) {\n//     setObj({ ...obj, ...{ [prop]: event.target.value } });\n//   }\n\n//   return (\n//     <div>\n//       <input\n//         value={obj.prop1}\n//         onChange={(event) => handleChange(\"prop1\", event)}\n//       />\n//       <input\n//         value={obj.prop2}\n//         onChange={(event) => handleChange(\"prop2\", event)}\n//       />\n//       <input\n//         value={obj.prop3}\n//         onChange={(event) => handleChange(\"prop3\", event)}\n//       />\n//       <br />\n//       {obj.prop1}-{obj.prop2}-{obj.prop3}\n//     </div>\n//   );\n// }\n// export default App;\n\n// const initDate = {\n//   year: 2025,\n//   month: 12,\n//   day: 31,\n// };\n\n// const weekDays = [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\", \"san\"];\n\n// function App() {\n//   const [date, setDate] = useState(initDate);\n\n//   function getRightFormat(obj) {\n//     return new Date(obj.year - obj.month - obj.day);\n//   }\n\n//   function getWeekDay(curDate, arr) {\n//     return arr[curDate.getDay()];\n//   }\n\n//   function changeHandler(prop, event) {\n//     setDate({ ...date, ...{ [prop]: event.target.value } });\n//   }\n\n//   return (\n//     <div>\n//       <p>\n//         <span>Year: {date.year}</span>\n//         <input onChange={(event) => changeHandler(\"year\", event)} />\n//       </p>\n//       <p>\n//         <span>Month: {date.month}</span>\n//         <input onChange={(event) => changeHandler(\"month\", event)} />\n//       </p>\n//       <p>\n//         <span>Day: {date.day}</span>\n//         <input onChange={(event) => changeHandler(\"day\", event)} />\n//       </p>\n//       <p>Day in a Week: {getWeekDay(getRightFormat(date), weekDays)}</p>\n//     </div>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 33//////////////////////////////////////////////////////////////////////////////////////\n// const initNotes = [\n//   {\n//     id: \"GYi9G_uC4gBF1e2SixDvu\",\n//     prop1: \"value11\",\n//     prop2: \"value12\",\n//     prop3: \"value13\",\n//   },\n//   {\n//     id: \"IWSpfBPSV3SXgRF87uO74\",\n//     prop1: \"value21\",\n//     prop2: \"value22\",\n//     prop3: \"value23\",\n//   },\n//   {\n//     id: \"JAmjRlfQT8rLTm5tG2m1L\",\n//     prop1: \"value31\",\n//     prop2: \"value32\",\n//     prop3: \"value33\",\n//   },\n// ];\n\n//const idForDelete = \"GYi9G_uC4gBF1e2SixDvu\";\n\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n\n//   const result = notes.map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n//       </p>\n//     );\n//   });\n\n//   function deleteNote(e) {\n//     setNotes(notes.filter((note) => note.id !== idForDelete));\n//   }\n\n//   return (\n//     <div>\n//       <p>{idForDelete}</p>\n//       {result}\n//       <button onClick={deleteNote}>delete</button>\n//       {result}\n//     </div>\n//   );\n// }\n// export default App;\n\n// const id = \"JAmjRlfQT8rLTm5tG2m1L\";\n// const prop1 = \"prop2\";\n// const prop2 = \"prop3\";\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n\n//   const result = notes.map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n//       </p>\n//     );\n//   });\n\n//   const copy = JSON.parse(JSON.stringify(notes)).map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n//       </p>\n//     );\n//   });\n\n//   function changeHandler(arr) {\n//     setNotes(\n//       arr.map((el) => {\n//         if (el.id === id) {\n//           return {\n//             ...el,\n//             [prop1]: el[prop1] + \"!\",\n//             [prop2]: el[prop2] + \"!!!\",\n//           };\n//         } else {\n//           return el;\n//         }\n//       })\n//     );\n//   }\n\n//   return (\n//     <div>\n//       {result}\n//       <button onClick={() => changeHandler(notes)}>изменить</button>\n//       {copy}\n//     </div>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 34//////////////////////////////////////////////////////////////////////////////////////\n// const initNotes = [\n//   {\n//     id: \"GYi9G_uC4gBF1e2SixDvu\",\n//     prop1: \"value11\",\n//     prop2: \"value12\",\n//     prop3: \"value13\",\n//   },\n//   {\n//     id: \"IWSpfBPSV3SXgRF87uO74\",\n//     prop1: \"value21\",\n//     prop2: \"value22\",\n//     prop3: \"value23\",\n//   },\n//   {\n//     id: \"JAmjRlfQT8rLTm5tG2m1L\",\n//     prop1: \"value31\",\n//     prop2: \"value32\",\n//     prop3: \"value33\",\n//   },\n// ];\n\n// const initProds = [\n//   { id: \"JAmjRlfQT8rLTm5tG2u9l\", name: \"prod1\", catg: \"catg1\", cost: 100 },\n//   { id: \"JAmjRlfQT8rLTm5tG2qu6\", name: \"prod2\", catg: \"catg2\", cost: 200 },\n//   { id: \"JAmjRlfQT8rLTm5tG2pp2\", name: \"prod3\", catg: \"catg3\", cost: 300 },\n// ];\n\n// function App() {\n//   const [value, setValue] = useState(initProds);\n\n//   const content = value.map((el) => {\n//     return (\n//       <tr key={el.id}>\n//         <td>{el.name}</td>\n//         <td>{el.catg}</td>\n//         <td>{el.cost}</td>\n//       </tr>\n//     );\n//   });\n\n//   return (\n//     <table>\n//       <thead>\n//         <tr>\n//           <td>id</td>\n//           <td>name</td>\n//           <td>cost</td>\n//         </tr>\n//       </thead>\n//       <tbody>{content}</tbody>\n//     </table>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 35//////////////////////////////////////////////////////////////////////////////////////\n// function id() {\n//   return new Date() * Math.floor(Math.random() * 10);\n// }\n// function initObj() {\n//   return {\n//     id: id(),\n//     prop1: \"\",\n//     prop2: \"\",\n//     prop3: \"\",\n//   };\n// }\n\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n//   const [obj, setObj] = useState(initObj());\n\n//   const result = notes.map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n//       </p>\n//     );\n//   });\n\n//   function changeObj(prop, event) {\n//     setObj({ ...obj, [prop]: event.target.value });\n//   }\n\n//   function updateNotes() {\n//     setNotes([...notes, obj]);\n//     setObj(initObj());\n//   }\n\n//   return (\n//     <div>\n//       {result}\n//       <input\n//         value={obj.prop1}\n//         onChange={(event) => changeObj(\"prop1\", event)}\n//       />\n//       <input\n//         value={obj.prop2}\n//         onChange={(event) => changeObj(\"prop2\", event)}\n//       />\n//       <input\n//         value={obj.prop3}\n//         onChange={(event) => changeObj(\"prop3\", event)}\n//       />\n//       <button onClick={updateNotes}>save changes</button>\n//     </div>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 36//////////////////////////////////////////////////////////////////////////////////////\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n//   const [editId, setEditId] = useState(null);\n\n//   const result = notes.map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n\n//         <button onClick={() => setEditId(note.id)}>edit</button>\n//       </p>\n//     );\n//   });\n\n//   function getValue(prop) {\n//     return notes.reduce(\n//       (res, note) => (note.id === editId ? note[prop] : res),\n//       \"\"\n//     );\n//   }\n\n//   function changeItem(prop, e) {\n//     setNotes(\n//       notes.map((note) =>\n//         note.id === editId ? { ...note, [prop]: e.target.value } : note\n//       )\n//     );\n//   }\n\n//   return (\n//     <div>\n//       {result}\n//       <input\n//         value={getValue(\"prop1\")}\n//         onChange={(e) => changeItem(\"prop1\", e)}\n//       />\n//       <input\n//         value={getValue(\"prop2\")}\n//         onChange={(e) => changeItem(\"prop2\", e)}\n//       />\n//       <input\n//         value={getValue(\"prop3\")}\n//         onChange={(e) => changeItem(\"prop3\", e)}\n//       />\n//       <button onClick={() => setEditId(null)}>clear</button>\n//     </div>\n//   );\n// }\n// export default App;\n\n// const initProds = [\n//   { id: \"JAmjRlfQT8rLTm5tG2u9l\", name: \"prod1\", catg: \"catg1\", cost: 100 },\n//   { id: \"JAmjRlfQT8rLTm5tG2qu6\", name: \"prod2\", catg: \"catg2\", cost: 200 },\n//   { id: \"JAmjRlfQT8rLTm5tG2pp2\", name: \"prod3\", catg: \"catg3\", cost: 300 },\n// ];\n\n// function App() {\n//   const [prods, setProds] = useState(initProds);\n//   const [editId, setEditId] = useState(null);\n\n//   const result = prods.map((prod) => {\n//     return (\n//       <tr key={prod.id}>\n//         <td>{prod.name}</td>\n//         <td>{prod.catg}</td>\n//         <td>{prod.cost}</td>\n//         <td>\n//           <button onClick={() => setEditId(prod.id)}>edit</button>\n//         </td>\n//       </tr>\n//     );\n//   });\n\n//   function getValue(key) {\n//     return prods.reduce(\n//       (res, prod) => (prod.id === editId ? prod[key] : res),\n//       \"\"\n//     );\n//   }\n\n//   function changeProd(key, e) {\n//     setProds(\n//       prods.map((prod) =>\n//         prod.id === editId ? { ...prod, [key]: e.target.value } : prod\n//       )\n//     );\n//   }\n\n//   return (\n//     <>\n//       <table>\n//         <thead>\n//           <tr>\n//             <td>name</td>\n//             <td>catg</td>\n//             <td>cost</td>\n//             <td>edit</td>\n//           </tr>\n//         </thead>\n//         <tbody>{result}</tbody>\n//       </table>\n//       <input value={getValue(\"name\")} onChange={(e) => changeProd(\"name\", e)} />\n//       <input value={getValue(\"catg\")} onChange={(e) => changeProd(\"catg\", e)} />\n//       <input value={getValue(\"cost\")} onChange={(e) => changeProd(\"cost\", e)} />\n//       <button onClick={() => setEditId(null)}>clear</button>\n//     </>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 37//////////////////////////////////////////////////////////////////////////////////////\n// function id() {\n//   return new Date() * Math.floor(Math.random() * 10);\n// }\n// function initObj() {\n//   return {\n//     id: id(),\n//     prop1: \"\",\n//     prop2: \"\",\n//     prop3: \"\",\n//   };\n// }\n\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n//   const [obj, setObj] = useState(initObj());\n//   const [editId, setEditId] = useState(null);\n\n//   const result = notes.map((note) => {\n//     return (\n//       <p key={note.id}>\n//         <span>{note.prop1}</span>\n//         <span>{note.prop2}</span>\n//         <span>{note.prop3}</span>\n\n//         <button onClick={() => setEditId(note.id)}>edit</button>\n//       </p>\n//     );\n//   });\n\n//   function getValue(prop) {\n//     if (editId) {\n//       return notes.reduce(\n//         (res, note) => (note.id === editId ? note[prop] : res),\n//         \"\"\n//       );\n//     } else {\n//       return obj[prop];\n//     }\n//   }\n//   function changeHandler(prop, event) {\n//     if (editId) {\n//       setNotes(\n//         notes.map((note) =>\n//           note.id === editId ? { ...note, [prop]: event.target.value } : note\n//         )\n//       );\n//     } else {\n//       setObj({ ...obj, [prop]: event.target.value });\n//     }\n//   }\n\n//   function saveChanges() {\n//     if (editId) {\n//       setEditId(null);\n//     } else {\n//       setNotes([...notes, obj]);\n//       setObj(initObj());\n//     }\n//   }\n\n//   return (\n//     <>\n//       {result}\n//       <input\n//         value={getValue(\"prop1\")}\n//         onChange={(e) => changeHandler(\"prop1\", e)}\n//       />\n//       <input\n//         value={getValue(\"prop2\")}\n//         onChange={(e) => changeHandler(\"prop2\", e)}\n//       />\n//       <input\n//         value={getValue(\"prop3\")}\n//         onChange={(e) => changeHandler(\"prop3\", e)}\n//       />\n//       <button onClick={saveChanges}>save changes</button>\n//     </>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 38//////////////////////////////////////////////////////////////////////////////////////\n// function App() {\n//   const [visible, setVisible] = useState(false);\n//   let text;\n\n//   if (visible) {\n//     text = <p>heeey</p>;\n//   }\n\n//   return (\n//     <div>\n//       {text}\n//       <button onClick={() => setVisible(!visible)}>\n//         {visible ? \"hide\" : \"show\"}\n//       </button>\n//     </div>\n//   );\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 39//////////////////////////////////////////////////////////////////////////////////////\n\n// const initProds = [\n//   {\n//     id: id(),\n//     name: \"prod1\",\n//     cost: \"cost1\",\n//     desc: \"long description 1\",\n//     comm: \"my super comment 1\",\n//     showDesc: false,\n//     showComm: false,\n//   },\n//   {\n//     id: id(),\n//     name: \"prod2\",\n//     desc: \"long description 2\",\n//     comm: \"my super comment 2\",\n//     showDesc: false,\n//     showComm: false,\n//   },\n//   {\n//     id: id(),\n//     name: \"prod3\",\n//     desc: \"long description 3\",\n//     comm: \"my super comment 3\",\n//     showDesc: false,\n//     showComm: false,\n//   },\n// ];\n\n// function App() {\n//   const [prods, setProds] = useState(initProds);\n\n//   function showMore(id, subject) {\n//     setProds(\n//       prods.map((prod) => {\n//         if (prod.id === id) {\n//           return { ...prod, showDesc: !prod[subject] };\n//         } else {\n//           return prod;\n//         }\n//       })\n//     );\n//   }\n\n//   const result = prods.map((prod) => {\n//     let description, comment;\n\n//     if (prod.showDesc) {\n//       description = <i>{prod.desc}</i>;\n//     }\n\n//     if (prod.showComm) {\n//       comment = <i>{prod.comm}</i>;\n//     }\n\n//     return (\n//       <li key={prod.id}>\n//         {prod.name}\n//         <button onClick={() => showMore(prod.id, \"showDesc\")}>\n//           show description\n//         </button>\n//         {description}\n//         <button onClick={() => showMore(prod.id, \"showComm\")}>\n//           show comment\n//         </button>\n//         {comment}\n//       </li>\n//     );\n//   });\n\n//   return <ul>{result}</ul>;\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 40//////////////////////////////////////////////////////////////////////////////////////\n// function App() {\n//   const [value, setValue] = useState(\"some text you can edit\");\n//   const [isEdit, setIsEdit] = useState(false);\n\n//   let text;\n\n//   if (!isEdit) {\n//     text = <span onClick={() => setIsEdit(true)}>{value}</span>;\n//   } else {\n//     text = (\n//       <input\n//         value={value}\n//         onChange={(e) => setValue(e.target.value)}\n//         onBlur={() => setIsEdit(false)}\n//       />\n//     );\n//   }\n\n//   return <p>{text}</p>;\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 41//////////////////////////////////////////////////////////////////////////////////////\n// const initNotes = [\n//   { text: \"note1\", isEdit: false },\n//   { text: \"note2\", isEdit: false },\n//   { text: \"note3\", isEdit: false },\n// ];\n// function App() {\n//   const [notes, setNotes] = useState(initNotes);\n\n//   function startEdit(index) {\n//     const copy = Object.assign([], notes);\n//     copy[index].isEdit = true;\n//     setNotes(copy);\n//   }\n\n//   function endEdit(index) {\n//     const copy = Object.assign([], notes);\n//     copy[index].isEdit = false;\n//     setNotes(copy);\n//   }\n\n//   function changeText(index, event) {\n//     const copy = Object.assign([], notes);\n//     copy[index].text = event.target.value;\n//     setNotes(copy);\n//   }\n\n//   const result = notes.map((note, index) => {\n//     let elem;\n\n//     if (!note.isEdit) {\n//       elem = <span onClick={() => startEdit(index)}>{note.text}</span>;\n//     } else {\n//       elem = (\n//         <input\n//           value={note.text}\n//           onChange={(event) => changeText(index, event)}\n//           onBlur={() => endEdit(index)}\n//         />\n//       );\n//     }\n\n//     return <li key={index}>{elem}</li>;\n//   });\n\n//   return <ul>{result}</ul>;\n// }\n// export default App;\n\n//////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// //////////////////////////////////////////////////////////////////////////////////////\n// 42//////////////////////////////////////////////////////////////////////////////////////\nfunction App() {}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}